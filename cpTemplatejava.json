{
	"Template for CP in Java": {
		"prefix": "cpTemplate",
		"body": [
			"import java.io.*;",
			"import java.util.*;",
			"",
			"public class ${TM_FILENAME_BASE} {",
			"    static FastReader in = new FastReader();",
			"    static PrintWriter out = new PrintWriter(System.out);",
			"",
			"    public static void main(String[] args) {",
			"        // Uncomment the following line to run with a single test case",
			"        // int t = 1;",
			"        int t = in.nextInt(); // Input the number of test cases",
			"        while (t-- > 0) {",
			"            solve();",
			"        }",
			"        out.close(); // Close the PrintWriter to flush output",
			"    }",
			"",
			"    private static void solve() {",
			"        // Add the problem-specific solution logic here",
			"        $1",
			"    }",
			"",
			"    // Implements quicksort algorithm",
			"    private static void quicksort(int[] nums, int begin, int end) {",
			"        if (begin < end) {",
			"            // Partition the array and get the pivot index",
			"            int pivot = partition(nums, begin, end);",
			"            // Recursively sort elements before and after the pivot",
			"            quicksort(nums, begin, pivot - 1);",
			"            quicksort(nums, pivot + 1, end);",
			"        }",
			"    }",
			"",
			"    // Partitions the array for quicksort",
			"    private static int partition(int[] nums, int left, int right) {",
			"        int pivot = nums[right]; // Choose the rightmost element as the pivot",
			"        int i = left - 1; // Pointer for the smaller element",
			"        for (int j = left; j < right; j++) {",
			"            // If the current element is smaller than or equal to the pivot",
			"            if (nums[j] <= pivot) {",
			"                i++;",
			"                swap(nums, i, j); // Swap the elements",
			"            }",
			"        }",
			"        swap(nums, i + 1, right); // Place the pivot in its correct position",
			"        return i + 1; // Return the index of the pivot",
			"    }",
			"",
			"    // Swaps two elements in the array",
			"    private static void swap(int[] nums, int x, int y) {",
			"        int temp = nums[x];",
			"        nums[x] = nums[y];",
			"        nums[y] = temp;",
			"    }",
			"",
			"    // Utility class for fast input",
			"    static class FastReader {",
			"        BufferedReader br;",
			"        StringTokenizer st;",
			"",
			"        public FastReader() {",
			"            br = new BufferedReader(new InputStreamReader(System.in));",
			"        }",
			"",
			"        String next() {",
			"            while (st == null || !st.hasMoreElements()) {",
			"                try {",
			"                    st = new StringTokenizer(br.readLine());",
			"                } catch (IOException e) {",
			"                    e.printStackTrace();",
			"                }",
			"            }",
			"            return st.nextToken();",
			"        }",
			"",
			"        int nextInt() {",
			"            return Integer.parseInt(next());",
			"        }",
			"",
			"        long nextLong() {",
			"            return Long.parseLong(next());",
			"        }",
			"",
			"        double nextDouble() {",
			"            return Double.parseDouble(next());",
			"        }",
			"    }",
			"}"
		],
		"description": "Basic template for competitive programming with quicksort."
	},
	"Fast Reader": {
		"prefix": "fastInput",
		"body": [
			"static class FastReader {",
			"    BufferedReader br;",
			"    StringTokenizer st;",
			"",
			"    public FastReader() {",
			"        br = new BufferedReader(new InputStreamReader(System.in));",
			"    }",
			"",
			"    String next() {",
			"        while (st == null || !st.hasMoreElements()) {",
			"            try {",
			"                st = new StringTokenizer(br.readLine());",
			"            } catch (IOException e) {",
			"                e.printStackTrace();",
			"            }",
			"        }",
			"        return st.nextToken();",
			"    }",
			"",
			"    int nextInt() {",
			"        return Integer.parseInt(next());",
			"    }",
			"",
			"    long nextLong() {",
			"        return Long.parseLong(next());",
			"    }",
			"",
			"    double nextDouble() {",
			"        return Double.parseDouble(next());",
			"    }",
			"",
			"    String nextLine() {",
			"        String str = \"\";",
			"        try {",
			"            str = br.readLine();",
			"        } catch (IOException e) {",
			"            e.printStackTrace();",
			"        }",
			"        return str;",
			"    }",
			"}"
		],
		"description": "FastReader class for competitive programming."
	},
	"Read Array of Integers": {
		"prefix": "readIntArray",
		"body": [
			"int n = in.nextInt(); // Read the size of the array",
			"int[] arr = new int[n]; // Initialize the array",
			"for (int i = 0; i < n; i++) {",
			"    arr[i] = in.nextInt(); // Read each element of the array",
			"}"
		],
		"description": "Reads an array of integers."
	},
	"Read Array of Strings": {
		"prefix": "readStringArray",
		"body": [
			"int n = in.nextInt(); // Read the size of the array",
			"String[] arr = new String[n]; // Initialize the array",
			"for (int i = 0; i < n; i++) {",
			"    arr[i] = in.next(); // Read each string into the array",
			"}"
		],
		"description": "Reads an array of strings."
	}
}
